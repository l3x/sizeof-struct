package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templs404Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x6a\xc4\x30\x10\x46\xe1\x5e\xa7\xf8\x33\xbd\xad\x18\x5c\xca\x6a\xd3\xe5\x0e\x63\x6b\x1c\x09\x92\x91\x91\x85\x13\x10\xba\x7b\x20\x4d\x16\xb3\xf5\x2b\xbe\xd7\x1a\x82\xec\x49\x05\x54\xf3\x41\xbd\x1b\x17\xd2\x85\xed\x93\xcf\x73\x21\xe5\x6b\xe5\x32\x44\xe1\x20\x85\xbc\x01\x00\xc7\xb7\xba\x16\xd6\x40\x88\x45\xf6\x85\x2c\xf9\xb7\x8c\x9a\xf1\xc5\x49\x71\xf0\x87\x8c\xe3\xe8\x2c\x7b\xe3\x6c\x48\x97\x37\xad\x41\x34\xa0\x77\xf3\x40\x6f\x59\xab\x68\x25\xdc\xfc\x92\xbf\x51\xe5\xa7\x0e\x9b\x68\xfd\x3f\x88\x93\x9f\x5f\x67\xbc\xe7\x3f\x00\x51\x8a\xbc\x38\x1b\xa7\x27\xc8\x6f\x00\x00\x00\xff\xff\xa7\xe2\x48\x80\xe0\x00\x00\x00")

func templs404TmplBytes() ([]byte, error) {
	return bindataRead(
		_templs404Tmpl,
		"templs/404.tmpl",
	)
}

func templs404Tmpl() (*asset, error) {
	bytes, err := templs404TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templs/404.tmpl", size: 224, mode: os.FileMode(420), modTime: time.Unix(1520638480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templs500Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\x6e\xc3\x30\x0c\x85\xe1\x5d\xa7\x78\xe5\x1e\x3b\x19\xba\x39\x5a\x3b\x76\xe8\x09\x18\x8b\xb1\x04\x34\xa4\x21\x13\x76\x01\x43\x77\x2f\xd2\xa5\x46\xbb\x92\x0f\xf8\xfe\x7d\x47\x92\x7b\x51\x01\xb9\xcd\xd4\x5a\x18\x52\x59\x31\x7e\xf2\xb2\x5c\x49\x79\xbd\x71\x3d\x65\xe1\x24\x95\x62\x00\x80\x81\xff\x7c\x6f\x95\x35\x11\x72\x95\xfb\x95\x7a\x8a\x6f\x06\x37\x3c\xb8\x28\x66\x9e\xa4\xeb\xba\xa1\xe7\x18\x86\x3e\x95\x35\x86\x7d\x87\x68\x42\x6b\xe1\x40\x8f\xa6\x2e\xea\xf4\x3c\x03\xc7\x82\x6a\x1b\x5c\xbe\xfc\x34\x8a\xfa\x6f\x43\xbe\xc4\xd7\xf3\x19\xef\x36\x2f\x2f\xf8\xb0\x87\x78\x2e\x3a\x61\x13\x75\x6c\xd5\x74\xfa\x51\xf3\xe5\x39\xff\x07\x7f\x07\x00\x00\xff\xff\x87\x29\x86\x5a\xf4\x00\x00\x00")

func templs500TmplBytes() ([]byte, error) {
	return bindataRead(
		_templs500Tmpl,
		"templs/500.tmpl",
	)
}

func templs500Tmpl() (*asset, error) {
	bytes, err := templs500TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templs/500.tmpl", size: 244, mode: os.FileMode(420), modTime: time.Unix(1520638480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templsIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x41\x6f\xdc\xb6\x12\xbe\xfb\x57\x4c\xf4\x0c\x64\xf7\xbd\xac\x84\x38\x46\x0e\x7e\x5a\x05\x46\x9a\x14\x39\xd4\x08\xea\xa0\x45\x51\xf4\xc0\x25\x47\x4b\xda\x14\xa9\x90\x23\xaf\x95\xed\xfe\xf7\x82\xa2\x56\x96\x76\xb7\x45\x92\x43\x7d\x59\x91\x33\xfc\xe6\x9b\x6f\x66\x68\x6e\xb7\x20\xb0\x54\x06\x21\x21\x5b\x27\xbb\xdd\x59\x2e\xd4\x03\x70\xcd\xbc\x5f\x26\x86\x3d\xac\x98\x5b\x48\x64\x02\x5d\x52\x9c\x01\xe4\xab\x86\xc8\x1a\xa0\xb6\xc6\x65\x12\x17\xc9\xde\x7d\x45\x06\x56\x64\x16\xca\x94\x36\x01\x25\x96\x89\x97\xcc\x61\x02\x9e\x5a\x8d\xcb\x44\x28\x5f\x6b\xd6\x5e\x19\x6b\x30\x29\x6e\x83\x2d\xcf\x22\xc6\x57\x63\xfb\x86\x73\xf4\x3e\xc2\xaf\x6d\x52\x5c\xfb\x7b\x20\x89\xf0\xa3\xad\x25\xba\x67\x13\x40\x76\x90\xc8\xca\x31\x23\x12\x90\x0e\xcb\x65\x92\x25\xc5\xaf\xcc\x10\x90\x85\x7b\x63\x37\x20\xed\x06\xaa\x86\x4b\xf0\x35\xe3\x08\xad\x6d\x1c\x78\x72\x0d\x27\x70\xf8\xb9\x51\x0e\xfd\x9b\x3c\x63\xc5\x59\x9e\x09\xf5\x50\x9c\x6d\xb7\x80\x46\xc0\x6e\x77\x36\x12\x91\x5b\x43\x68\x28\x81\x03\x25\x9d\xdd\x44\xfd\x46\x7b\xdc\xea\x45\x25\x16\xaf\xa3\x41\x5e\x14\x8d\xf1\xac\xc4\xf4\x56\x7d\x41\x5b\xce\xf2\x4c\x5e\x04\x4b\xf8\x1b\x1f\x5b\x77\x89\x26\x7b\x53\x6f\x0c\x72\xa0\x50\x64\x5d\x52\x6c\xb7\x90\xbe\xb5\x02\x61\xb7\xeb\xb9\x0e\xae\xbe\x62\x5a\x17\x37\x96\xf0\x19\x5c\x9b\x16\x4c\x53\xad\xd0\x79\x58\xa3\x41\xc7\x08\x05\xac\x5a\x20\xa9\x3c\xb0\xba\xd6\x8a\x33\x52\xd6\x00\x73\x08\xe4\x1a\x04\x6b\x74\x0b\xa5\x75\xf0\xf8\xfa\x12\x98\xe3\x52\x11\x72\x6a\x1c\xfa\x34\xcf\x22\xf6\x9e\xf1\x3e\x70\x2e\x2f\x86\x84\xb5\xf5\xca\xac\x93\x62\xbe\xcf\xed\xc9\xeb\x84\x2e\xe0\xd0\x37\x9a\x7c\x9f\xea\x44\xce\x68\x59\x28\x63\x3a\x29\xb6\x5b\x50\x25\xa4\xef\x9c\xb3\x2e\x48\x7f\xac\xda\xca\x2f\x38\xd3\xda\x36\x04\x4f\x9f\x0b\xc1\xcc\x7a\xaa\xa5\xbc\x2c\x3e\x32\x17\x68\x02\x06\xb4\x3c\x93\x97\x23\x73\xdd\x89\xbb\x8f\x93\x67\xf5\x41\xbe\xa1\x29\xb4\xc7\xbe\x2b\x36\x8a\x24\xa4\x3f\x77\x64\x47\xb4\xe4\xab\xe2\x53\x5b\x23\x78\xf5\x05\xaf\x20\x00\xc6\x92\x77\x88\xf2\xd5\x90\xce\x07\xff\x5e\x3d\xa2\xf8\x96\x84\xba\xd1\x9b\xa6\xf3\xee\xb1\xd6\xcc\x74\x85\x3c\x4a\xe6\xb7\xd0\xe4\x61\xde\x40\xf9\x8e\xc8\x0d\xab\x02\x79\x60\x46\x00\xd3\x1b\xd6\x7a\x90\xcc\x43\xd9\xf1\x08\x7c\xc5\x0b\x30\x16\x2a\x46\x84\xae\x1b\x19\x45\xb0\x61\xbe\x1f\x00\x91\x9e\x96\x64\x98\x93\x98\xd6\xb5\x73\xac\xfd\xb7\xd2\x62\x5d\xb0\x90\x90\x22\xdf\xe5\xd0\xed\x42\xed\xac\x08\xc3\x6d\xcb\xce\xa0\xd1\xac\x49\xc6\x92\x85\x75\x63\x04\x3a\xdd\x86\x46\xa0\x7d\xb1\xc6\xd9\x75\x81\xde\x5b\x57\x35\x9a\x5d\x41\xce\xad\xc0\xa2\x9f\xdc\xdf\x6f\xfe\x08\xf5\x9d\xc3\x12\x6e\xe0\xbf\xd0\xef\x76\x5b\x79\xd6\x39\x7e\x95\x4a\xb7\xf1\xf2\xf9\x7e\x99\xfe\x59\xa7\xc0\xff\x69\x01\x30\x11\xad\xbf\xf8\x26\xaa\x09\xac\xd1\x08\x0f\xd6\x74\x85\x3f\x10\xc8\xc3\x06\x1d\x0e\x7d\x30\x46\xfe\xb4\xb1\x3d\xa0\x8f\xfa\xfa\xd0\x65\xa5\x42\x2d\x3c\xac\x1a\x02\xa1\xca\x12\x1d\x1a\x02\xeb\x04\x3a\xa8\x58\x0b\x92\x3d\xe0\xc8\x10\x18\xf8\x09\x6a\x90\x35\x14\xaf\xa7\xaa\x3c\x70\xdb\x98\x70\x85\x31\xce\xad\x13\xca\xac\x75\x1b\xe3\xd5\x4c\x84\x65\xdf\xd5\x6a\x6d\xaa\x00\xe9\x1a\x3d\x81\x3c\x59\x94\x50\x8a\x1f\x90\x98\xd2\x7e\x3a\xc1\x7d\x75\x06\xb8\x38\xc8\xd7\x61\x39\x9a\xe4\xe3\xca\x11\x5b\x69\x5c\x6c\x1c\xab\x87\x4a\xe5\xdd\xde\xb8\x32\xe4\x26\xa5\xc9\x49\x16\xef\x3b\xb9\xf2\x8c\xe4\x91\x29\x04\x0d\x14\x0e\x8c\x79\x16\x60\xb6\x5b\x70\xe1\x96\x83\x73\x67\x37\x70\xb5\x3c\x91\xce\x51\xc0\x9c\x44\xb8\xe7\xc2\x89\xfd\x8d\x90\x67\x24\x0e\x5d\xce\x20\xe4\x7c\xae\xd1\x04\xdc\xce\xfb\xad\x6c\xcc\xbd\x87\x3f\xc3\x38\xc5\x00\x4f\xf1\xd5\x0b\x38\xe7\xf2\xd0\xb5\x67\x11\xa5\x0e\x05\x9a\xad\x29\x62\x5e\xce\x61\xd6\x98\x07\xe5\x79\xf0\x84\x73\xd5\x6d\xcf\x47\x27\xf6\x57\x6d\xa4\xf4\x37\x10\xf8\x39\x1c\xbd\x08\xe7\xd2\x34\xcd\x57\x2e\x2b\x8e\x8e\x8e\x69\x96\x4a\x6b\x14\x1d\x4d\x2e\xd3\xb7\xa8\xa7\x52\x1d\xd6\x93\x4b\x73\x1f\x23\x07\xf7\x0f\xfe\x63\xdf\x6b\xbb\x5d\x68\xbb\x61\xac\xa3\x8b\xb1\x34\x04\xd8\xed\x00\xab\x9a\xda\xc1\x25\x29\x0e\xfe\x5b\x3f\xdd\x09\x93\xe0\x21\x83\xb3\x53\x1e\xe3\xd5\xa9\xb3\xa7\x6a\x18\x79\x8d\x05\xeb\xb8\x9e\xc7\xfa\x01\x59\x62\x7a\xc0\x9a\x02\x0c\xfd\x35\x09\x94\x67\x93\x6e\x3e\xbc\xde\x26\xf7\xdc\xd1\x17\x4c\x5e\x0e\xf1\x63\xff\xe3\xb9\x53\x35\x81\x77\x7c\x99\x48\xa2\xda\x5f\x65\x19\x17\xe6\xce\xa7\x5c\xdb\x46\x94\x9a\x39\x4c\xb9\xad\x32\x76\xc7\x1e\x33\xad\x56\x3e\xbb\xfb\xdc\xa0\x6b\xb3\x8b\xf4\x65\xfa\xaa\x5f\xa4\x95\x32\xe9\x9d\x4f\xfa\x57\x26\xe1\x23\x65\x77\xec\x81\x45\xf4\x50\x82\xf8\xf5\x7d\x01\x19\xc7\xec\x65\x17\x8d\x71\xfc\xa6\x30\x51\xaf\xf3\x59\xd9\x18\x1e\xee\xea\xd9\x1c\xb6\x83\xd2\x0f\xcc\x41\x7c\xdc\xc1\x12\x02\x72\x58\xcc\xf6\xef\xbd\xf9\xff\x07\xc7\xb8\x93\x7a\xa4\x4f\x12\x2b\x9c\x25\x81\x10\x85\xcf\xac\xb2\xc6\xde\x33\x75\xc2\x7b\x8d\x74\x8b\xde\x77\x41\xc3\xd1\x9f\xac\xe8\x4f\x56\x56\x60\xb6\xb6\x9a\x99\xf5\xf8\xdc\xf9\x2c\xf9\xcf\xda\x26\xf3\x94\x6b\xc5\xef\x4f\x53\x0e\x7f\x1b\x65\x84\xdd\xa4\xda\xc6\x67\x64\x1a\xde\xdd\xb0\x84\xe7\x6f\x68\xf9\x1c\xfe\xb7\x37\xaf\xc8\xb2\xd9\x29\x2a\x6b\xa4\x5f\x98\x6e\x70\x36\x9f\x0f\xb0\xbb\x9e\x46\xf8\x7d\xd2\xf0\xa9\x81\xfe\x0a\x00\x00\xff\xff\xc1\x2a\xa4\x9e\xd0\x0c\x00\x00")

func templsIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templsIndexTmpl,
		"templs/index.tmpl",
	)
}

func templsIndexTmpl() (*asset, error) {
	bytes, err := templsIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templs/index.tmpl", size: 3234, mode: os.FileMode(420), modTime: time.Unix(1520651897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templsPartsBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdd\x8e\xf3\x34\x10\xbd\xef\x53\x4c\x7d\xc1\xd5\x26\x66\x5b\x10\x1f\xe0\x44\xfa\xf4\xed\x0a\xed\x15\x5c\x80\x04\x5a\xad\x90\x63\x4f\x1a\x53\xc7\x36\xf6\x34\x6d\xa9\xfa\x28\xdc\xf1\x64\x3c\x09\x72\xb2\xfd\x81\x45\xd5\xde\x24\x9e\x39\x3e\x67\x46\xc7\x63\x1f\x0e\xa0\xb1\x35\x0e\x81\x35\x32\x21\x83\xe3\x71\x26\xe6\x0f\xdf\x7f\xfa\xf1\x97\x1f\x1e\xa1\xa3\xde\xd6\x33\x91\x7f\x60\xa5\x5b\x55\x0c\x1d\xcb\x09\x94\xba\x9e\x01\x88\x1e\x49\x82\xea\x64\x4c\x48\x15\xdb\x50\x5b\x7c\x60\x17\xa0\x23\x0a\x05\xfe\xbe\x31\x43\xc5\x7e\x2e\x7e\xfa\x58\x7c\xf2\x7d\x90\x64\x1a\x8b\x0c\x94\x77\x84\x8e\x2a\xf6\xf4\x58\xa1\x5e\xe1\x15\xcf\xc9\x1e\x2b\x36\x18\xdc\x06\x1f\xe9\x6a\xeb\xd6\x68\xea\x2a\x8d\x83\x51\x58\x8c\xc1\x1d\x18\x67\xc8\x48\x5b\x24\x25\x2d\x56\xf7\x6f\x64\x34\x26\x15\x4d\x20\xe3\xdd\x95\xd2\xc7\xb4\x86\x95\x0f\x1d\x46\x90\x8d\xdf\x10\x24\x8a\x1b\x45\x90\xcc\x1f\x38\x7f\xa3\xb1\xc6\xfd\xd6\x47\x9d\xae\x04\x56\x3e\x1b\x72\x77\x45\xbb\xcb\x1f\xdf\xb2\x7a\x96\xd9\x64\xc8\x62\xfd\xdd\xb8\x0b\x26\x04\xc8\x84\x24\xf8\x84\x8c\x9b\xac\x71\x6b\x88\x68\x2b\x96\x3a\x1f\x49\x6d\x08\x8c\xca\x7d\x76\x11\xdb\x8a\x71\xd3\xcb\x15\x26\xde\xca\x21\xa7\x4b\xa3\x3c\x7b\x43\xa4\xbd\xc5\xd4\x21\xd2\x89\x95\x5d\x4f\xdf\x70\xde\xcb\x9d\xd2\xae\x6c\xbc\xa7\x44\x51\x86\x1c\x28\xdf\xf3\x73\x82\x2f\xcb\x65\xb9\xe0\x2a\xa5\x4b\xae\xec\x8d\x2b\x55\x4a\x93\x05\xb7\xca\xf0\x29\xc5\x7b\x79\x66\x64\xca\xbc\x28\x9e\x4d\x0b\x96\xe0\xe9\x11\xbe\x7e\xc9\x32\x00\x62\x3a\x02\x48\x51\x5d\xfa\xf3\x29\x95\xaf\x3d\xe6\xb6\xf2\x90\x7d\x99\x3a\x33\xf0\x65\xf9\x55\xb9\xb8\xc4\x63\x4b\xbf\x25\x56\x0b\x3e\xc9\xbc\x5f\x33\x62\x0a\xde\x69\x7e\x5f\x7e\x51\x2e\x4e\xd1\xff\xea\x89\xf9\x33\x3a\x6d\xda\x97\xa2\xa8\x67\x82\x4f\x03\x2e\x1a\xaf\xf7\x23\xea\xe4\x00\xca\xca\x94\x2a\xe6\xe4\xd0\xc8\x08\xd3\xaf\x68\xcd\x0e\x75\x41\x3e\x9c\x12\xc6\x0d\x18\xd3\x34\xcd\x00\x42\x9b\x33\x31\x8f\x8e\x34\x0e\xe3\x2b\x06\x70\x38\x00\x61\x1f\xac\x24\x04\x46\x3e\x30\x28\xf3\xfd\x1b\x89\x5c\x9b\x61\x2c\xcd\x9d\x9c\x16\x37\xa4\xfe\x25\xf4\x3a\xa2\x67\xb1\x8b\x54\xeb\x3d\x61\x7c\x4f\x67\x22\x9c\x30\xc2\x1d\x15\xfd\x86\x50\xb3\xfa\x33\xe5\xc3\xfe\x5b\x58\x7c\x7e\xff\x01\x84\xfc\xcf\xb8\xad\x0c\x75\x9b\x66\xb4\xdd\x2e\x77\x0c\x48\xc6\x55\x7e\x14\x7e\x6d\xac\x74\x6b\x56\xdb\xe5\x4e\x70\x59\x0b\x1e\x6e\x17\x79\xc0\x01\xad\x0f\xa8\x61\x6b\xa8\x83\xbf\xff\xfc\x6b\x5a\xdc\x2a\x38\x5d\x46\xae\x31\x64\x7e\xc8\x75\xe6\xe7\x42\x57\x56\x9e\x0c\x10\x7c\x3a\x59\xc1\xa7\x17\xee\x70\x00\x74\x3a\xdb\x75\xf5\x1e\xe6\x03\x39\x1e\x2f\xd0\x3f\x01\x00\x00\xff\xff\x5d\x1a\x4a\xc9\x2b\x05\x00\x00")

func templsPartsBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_templsPartsBaseTmpl,
		"templs/parts/base.tmpl",
	)
}

func templsPartsBaseTmpl() (*asset, error) {
	bytes, err := templsPartsBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templs/parts/base.tmpl", size: 1323, mode: os.FileMode(420), modTime: time.Unix(1520651893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templs/404.tmpl": templs404Tmpl,
	"templs/500.tmpl": templs500Tmpl,
	"templs/index.tmpl": templsIndexTmpl,
	"templs/parts/base.tmpl": templsPartsBaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templs": &bintree{nil, map[string]*bintree{
		"404.tmpl": &bintree{templs404Tmpl, map[string]*bintree{}},
		"500.tmpl": &bintree{templs500Tmpl, map[string]*bintree{}},
		"index.tmpl": &bintree{templsIndexTmpl, map[string]*bintree{}},
		"parts": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{templsPartsBaseTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

